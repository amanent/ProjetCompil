--Compiling
--A priori c'est bon :)
y    x    x    x    c2    --code :

--champs statiques :
	PUSHN	1	--Cla2_single
	PUSHN	1	--Cla2_y0
	PUSHN	1	--Cla2_x0
	JUMP	start	
--methodes statiques :
	--classe Cla3
s2:	NOP		
	PUSHL	0	
	PUSHL	0	
	ADD		
	STOREL	0	
	STOREL	0	
	POPN	1	
	RETURN		
	--classe Cla2
test0:	NOP		
	PUSHN	1	--x
	PUSHN	1	--y
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHI	7	--int cst
	STOREL	0	
	PUSHI	3	--int cst
	PUSHL	0	
	ADD		
	PUSHL	0	
	ADD		
	STOREL	0	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	STOREL	0	
	STOREL	0	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	POPN	1	
	RETURN		
toString0:	NOP		
	PUSHS	"("	--str cst
	PUSHN	1	
	SWAP		
	PUSHA	toString	
	CALL		
	CONCAT		
	PUSHS	","	--str cst
	CONCAT		
	PUSHN	1	
	SWAP		
	PUSHA	toString	
	CALL		
	CONCAT		
	PUSHS	")"	--str cst
	CONCAT		
	STOREL	0	
	POPN	1	
	RETURN		
s2:	NOP		
	PUSHL	0	
	PUSHL	0	
	ADD		
	STOREL	0	
	STOREL	0	
	POPN	1	
	RETURN		
s1:	NOP		
	PUSHL	0	
	PUSHI	1	--int cst
	ADD		
	STOREL	0	
	PUSHL	0	
	STOREL	0	
	POPN	1	
	RETURN		
--methodes non statiques :
	--classe Cla3
Cla3:	NOP		--constructor
	ALLOC	0	
	STOREL	-1	
	POPN	0	
	RETURN		
	--classe Cla2
Cla2:	NOP		--constructor
	ALLOC	0	
	STOREL	-1	
	POPN	0	
	RETURN		
test2:	NOP		
	PUSHI	18	--int cst
	STOREL	0	
	PUSHN	1	--x
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	POPN	1	
	RETURN		
test1:	NOP		
	PUSHI	5	--int cst
	STOREL	0	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHI	2	--int cst
	PUSHL	0	
	ADD		
	STOREL	0	
	PUSHI	3	--int cst
	PUSHL	0	
	PUSHI	2	--int cst
	MUL		
	ADD		
	PUSHL	0	
	PUSHI	3	--int cst
	DIV		
	ADD		
	STOREL	0	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHI	11	--int cst
	PUSHA	addx	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHI	2	--int cst
	PUSHA	muly	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	STORE	0	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	STORE	0	
	STORE	0	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHI	12	--int cst
	PUSHA	addx	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHI	3	--int cst
	PUSHA	muly	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	PUSHN	1	
	SWAP		
	PUSHA	println	
	CALL		
--:	POPN	1	
	POPN	1	
	RETURN		
toString:	NOP		
	PUSHS	"("	--str cst
	PUSHN	1	
	SWAP		
	PUSHA	toString	
	CALL		
	CONCAT		
	PUSHS	","	--str cst
	CONCAT		
	PUSHN	1	
	SWAP		
	PUSHA	toString	
	CALL		
	CONCAT		
	PUSHS	")"	--str cst
	CONCAT		
	STOREL	0	
	POPN	1	
	RETURN		
muly:	NOP		
	STORE	0	
	PUSHL	0	
	LOAD	0	
	STOREL	0	
	POPN	1	
	RETURN		
addx:	NOP		
	PUSHL	0	
	PUSHL	0	
	ADD		
	STOREL	0	
	PUSHL	0	
	STOREL	0	
	POPN	1	
	RETURN		
--code des fonctions de base
toString:	PUSHL	-1	
	STR		
	STOREL	-2	
	POPN	1	
	RETURN		--fin toString

print:	PUSHL	-1	
	WRITES		
	SWAP		
	POPN	1	
	RETURN		--fin print

println:	PUSHL	-1	
	PUSHS	"\n"	
	CONCAT		
	WRITES		
	SWAP		
	POPN	1	
	RETURN		--fin println

start:	START		--main function
	PUSHN	1	--c2
	PUSHN	1	--x
--:	POPN	1	
	PUSHN	1	
	PUSHA	Cla2	
	CALL		
	STOREL	0	
